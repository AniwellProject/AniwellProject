<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.RSW.repository.PetRepository">

	<!-- 펫 목록 조회 -->
	<select id="getPetsByMemberId" parameterType="int"
		resultType="com.example.RSW.vo.Pet">
		SELECT *
		FROM pet p
		WHERE p.memberId = #{memberId}
	</select>

	<!-- 펫 삭제 -->
	<delete id="deletePet" parameterType="int">
		DELETE FROM pet WHERE id =
		#{id}
	</delete>

	<!-- 펫 등록 -->
	<insert id="insertPet" parameterType="com.example.RSW.vo.Pet">
		INSERT INTO pet
		(memberId,
		name, species, breed,
		gender, birthDate, weight, photo)
		VALUES
		(#{memberId}, #{name},
		#{species}, #{breed}, #{gender}, #{birthDate},
		#{weight},
		#{photo})
	</insert>

	<!-- 마지막 삽입된 ID 조회 -->
	<select id="getLastInsertId" resultType="int">
		SELECT LAST_INSERT_ID();
	</select>

	<!-- 펫 수정 (사진 없이) -->
	<update id="updatePetWithoutPhoto" parameterType="map">
		UPDATE pet
		SET
		name = #{name}, species = #{species}, breed = #{breed},
		gender =
		#{gender}, birthDate = #{birthDate}, weight = #{weight}
		WHERE id =
		#{petId}
	</update>

	<!-- 펫 수정 (사진 포함) -->
	<update id="updatePet" parameterType="com.example.RSW.vo.Pet">
		UPDATE pet
		SET name =
		#{name}, species = #{species}, breed = #{breed},
		gender = #{gender},
		birthDate = #{birthDate}, weight = #{weight}, photo =
		#{photo}
		WHERE id
		= #{id}
	</update>

	<!-- 펫 ID로 조회 -->
	<select id="getPetsById" parameterType="int"
		resultType="com.example.RSW.vo.Pet">
		SELECT *
		FROM pet p
		WHERE p.id = #{petId}
	</select>

	<select id="findPetsWithBirthdayInDays"
		resultType="com.example.RSW.vo.Pet">
		SELECT *
		FROM pet
		WHERE DATE_FORMAT(birthDate, '%m-%d') IN (
		DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 0 DAY), '%m-%d'),
		DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 3 DAY), '%m-%d'),
		DATE_FORMAT(DATE_ADD(NOW(), INTERVAL 7 DAY), '%m-%d')
		)
	</select>

	<!-- [추가] 현재 저장된 펫의 weight 조회 -->
	<select id="getPetWeightById" parameterType="int"
		resultType="double">
		SELECT weight
		FROM pet
		WHERE id = #{petId}
		LIMIT 1
	</select>

	<!-- [추가] 해당 펫의 체중 로그 존재 여부(0이면 로그 없음) -->
	<select id="countWeightLogsByPetId" parameterType="int"
		resultType="int">
		SELECT COUNT(*)
		FROM pet_weight_log
		WHERE petId = #{petId}
	</select>

	<!-- ✅ 가장 최근 체중 1건 조회 -->
	<select id="findLastWeightByPetId" parameterType="int"
		resultType="double">
		SELECT weightKg
		FROM pet_weight_log
		WHERE petId = #{petId}
		ORDER BY measuredAt DESC
		LIMIT 1
	</select>

	<!-- ✅ 체중 로그 INSERT -->
	<insert id="insertWeightLog">
		INSERT INTO pet_weight_log
		SET petId = #{petId},
		measuredAt = NOW(),
		weightKg = #{weightKg},
		source = #{source},
		note =
		#{note}
	</insert>

	<!-- ✅ 펫 현재 체중 업데이트 ※ pet 테이블의 실제 컬럼명이 'weight'임을 기존 매퍼에서 확인했습니다. ※ 별도의 
		updatedAt/weightUpdatedAt 컬럼이 없으면 아래 두 줄만 두세요. -->
	<update id="updatePetWeight">
		UPDATE pet
		SET weight = #{weightKg}
		WHERE id = #{petId}
	</update>

	<!-- ✅ 최근 등록된 펫 ID 조회 (동명이인 대비: memberId + name) -->
	<select id="findNewestPetIdByMemberAndName" resultType="int">
		SELECT id
		FROM pet
		WHERE memberId = #{memberId}
		AND name = #{name}
		ORDER BY id DESC
		LIMIT 1
	</select>

	<!-- ✅ 진행중 기본 사료 1건 조회 -->
	<select id="findActivePrimaryFood" resultType="map">
		SELECT
		brand,
		feed_type AS feedType   <!-- ★ Map 키명이 feedType 이 되도록 별칭 -->
		FROM pet_food
		WHERE petId = #{petId}
		AND endedAt IS NULL
		LIMIT 1
	</select>

	<!-- ✅ 진행중 기본 사료 종료 -->
	<update id="closeActivePrimaryFood">
		UPDATE pet_food
		SET endedAt = NOW()
		WHERE petId =
		#{petId}
		AND endedAt IS NULL
	</update>

	<!-- ✅ 새 기본 사료 시작 -->
	<insert id="insertPrimaryFood">
		INSERT INTO pet_food
		SET petId = #{petId},
		brand =
		#{brand},
		feed_type = #{feedType},
		isPrimary = 1,
		startedAt =
		CURRENT_DATE(),
		endedAt = NULL,
		regDate = NOW(),
		updateDate= NOW()
	</insert>

	<!-- ✅ 급여 이벤트 기록 (브랜드/타입만 기록, 무게 없음) -->
	<!-- (A) 고정값 0.00으로 삽입 -->
	<insert id="insertFeedEvent">
		INSERT INTO pet_feed_log
		SET petId = #{petId},
		fedAt =
		NOW(),
		amountG =
		IFNULL(#{amountG}, 0.00),
		foodId = #{foodId},
		<!-- foodName = #{foodName}, -->
		feedType = #{feedType},
		brand = #{brand},
		source =
		#{source},
		note =
		#{note},
		regDate = NOW(),
		updateDate = NOW()
	</insert>

	<!-- ✅ 특정 일자의 급여 횟수 조회 -->
	<select id="countFeedsOnDate" resultType="int">
		SELECT COUNT(*)
		FROM
		pet_feed_log
		WHERE petId = #{petId}
		AND DATE(fedAt) = #{ymd}
	</select>

	<!-- ✅ 펫 급여 로그 기록 -->
	<!-- - petId : 어떤 펫의 기록인지 (FK → pet.id) -->
	<!-- - fedAt : 급여 시각 (기본 NOW() → 현재시간 자동) -->
	<!-- - brand : 사료 브랜드명 -->
	<!-- - feedType: 사료 형태(dry, wet, treat 등) -->
	<!-- - source : 기록 출처(기본 manual) -->
	<!-- - note : 메모 -->
	<!-- - regDate : 레코드 생성일 (NOW) -->
	<!-- - updateDate : 레코드 수정일 (NOW) -->
	<insert id="insertFeedLog"
		parameterType="com.example.RSW.vo.PetFeedLog">
		INSERT INTO pet_feed_log
		SET
		petId = #{petId},
		fedAt = NOW(),
		brand =
		#{brand},
		<!-- foodName = #{foodName}, -->
		feedType = #{feedType},
		source =
		#{source},
		note = #{note},
		amountG =
		IFNULL(#{amountG}, 0), <!-- ✅ null일 경우 0으로 기본 -->
		regDate = NOW(),
		updateDate = NOW()
	</insert>

	<!-- ✅ 단건: 펫 기본정보 + 최신 급여정보 (스키마에 맞게 교정) -->
	<!-- ✅ 펫 기본정보 + 최신 급여 사료정보 조회 -->
	<select id="getPetWithLatestFoodById" parameterType="int"
		resultType="map">
		SELECT
		p.*,
		COALESCE(x.brand, pf.brand) AS brand, <!-- 브랜드 (로그우선 → 메타 보완) -->
		COALESCE(pf.productName, x.productName) AS productName, <!-- 제품명 (메타 우선 
			→ 로그 보완) -->
		COALESCE(pf.flavor, x.flavor) AS flavor, <!--맛 (메타우선 → 로그 보완) -->
		x.feedType AS foodType, <!-- 급여 형태 (로그에서만 존재) -->
		x.fedAt AS
		lastFedAt <!-- 최신 급여 시각 -->
		FROM pet p
		LEFT JOIN (
		SELECT l1.petId, l1.foodId,
		l1.brand,
		l1.productName,
		l1.flavor, l1.feedType, l1.fedAt
		FROM
		pet_feed_log l1
		JOIN (
		SELECT petId, MAX(fedAt) AS fedAt
		FROM
		pet_feed_log
		WHERE petId =
		#{petId}
		GROUP BY petId
		) lm ON lm.petId =
		l1.petId AND lm.fedAt =
		l1.fedAt
		WHERE l1.petId = #{petId}
		LIMIT 1
		) x ON
		p.id = x.petId
		LEFT JOIN
		pet_food pf ON x.foodId = pf.id
		WHERE p.id =
		#{petId}
	</select>

	<!-- ✅ 리스트: 펫 목록 + 최신 급여정보 (새로 추가) -->
	<select id="getPetsByMemberIdWithLatestFood" parameterType="int"
		resultType="map">
		SELECT
		p.*,
		COALESCE(x.brand, pf.brand) AS brand, <!-- 로그 우선 → 메타 보완 -->
		pf.productName AS productName,
		pf.flavor AS flavor,
		x.feedType AS
		foodType, <!-- 로그값 -->
		x.fedAt AS lastFedAt
		FROM pet p
		LEFT JOIN (
		SELECT l1.petId, l1.foodId,
		l1.brand, l1.feedType, l1.fedAt
		FROM pet_feed_log l1
		JOIN (
		SELECT petId,
		MAX(fedAt) AS fedAt
		FROM pet_feed_log
		GROUP BY petId <!-- 전체 펫의 최신 1건씩 -->
		) lm ON lm.petId = l1.petId AND lm.fedAt = l1.fedAt
		) x ON p.id =
		x.petId
		LEFT JOIN pet_food pf ON x.foodId = pf.id
		WHERE p.memberId =
		#{memberId}
	</select>


	<insert id="insertFeedEventSimple">
		INSERT INTO pet_feed_log
		SET petId = #{petId},
		fedAt =
		NOW(),
		amountG =
		0.00,
		foodId = #{foodId},
		<!-- foodName = NULL, -->
		feedType =
		#{feedType},
		brand = #{brand},
		source = 'manual',
		note = NULL,
		regDate =
		NOW(),
		updateDate = NOW()
	</insert>



</mapper>
